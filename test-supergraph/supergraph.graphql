schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Annotation implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """ID for the annotation."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """ID of the metadata of this annotation"""
  metadataID: ID! @join__field(graph: METADATA_API)

  """JSON formatted data of this annotation."""
  data: JSON! @join__field(graph: METADATA_API)
  namespace: AnnotationNamespace! @join__field(graph: METADATA_API)
  metadata: Metadata! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type AnnotationConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [AnnotationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Input information to delete an annotation."""
input AnnotationDeleteInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this annotation."""
  nodeID: ID!

  """The namespace ID for this annotation."""
  namespaceID: ID!
}

"""Return response from annotationDelete"""
type AnnotationDeleteResponse
  @join__type(graph: METADATA_API)
{
  """The ID of the unset annotation."""
  deletedID: ID!
}

"""An edge in a connection."""
type AnnotationEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: Annotation

  """A cursor for use in pagination."""
  cursor: Cursor!
}

type AnnotationNamespace implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID for the annotation namespace."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """The name of the annotation namespace."""
  name: String! @join__field(graph: METADATA_API)

  """Flag for if this namespace is private."""
  private: Boolean! @join__field(graph: METADATA_API)
  annotations: [Annotation!] @join__field(graph: METADATA_API)

  """The owner of the annotation namespace."""
  owner: ResourceOwner! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type AnnotationNamespaceConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [AnnotationNamespaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from annotationNamespaceCreate"""
type AnnotationNamespaceCreatePayload
  @join__type(graph: METADATA_API)
{
  """The created annotation namespace."""
  annotationNamespace: AnnotationNamespace!
}

"""Return response from annotationNamespaceDelete"""
type AnnotationNamespaceDeletePayload
  @join__type(graph: METADATA_API)
{
  """The ID of the deleted annotation namespace."""
  deletedID: ID!

  """The count of annotations deleted"""
  annotationDeletedCount: Int!
}

"""An edge in a connection."""
type AnnotationNamespaceEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: AnnotationNamespace

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for AnnotationNamespace connections"""
input AnnotationNamespaceOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order AnnotationNamespaces."""
  field: AnnotationNamespaceOrderField!
}

"""Properties by which AnnotationNamespace connections can be ordered."""
enum AnnotationNamespaceOrderField
  @join__type(graph: METADATA_API)
{
  ID @join__enumValue(graph: METADATA_API)
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
  NAME @join__enumValue(graph: METADATA_API)
  OWNER @join__enumValue(graph: METADATA_API)
  PRIVATE @join__enumValue(graph: METADATA_API)
}

"""Return response from annotationNamespaceUpdate"""
type AnnotationNamespaceUpdatePayload
  @join__type(graph: METADATA_API)
{
  """The updated annotation namespace."""
  annotationNamespace: AnnotationNamespace!
}

"""
AnnotationNamespaceWhereInput is used for filtering AnnotationNamespace objects.
Input was generated by ent.
"""
input AnnotationNamespaceWhereInput
  @join__type(graph: METADATA_API)
{
  not: AnnotationNamespaceWhereInput
  and: [AnnotationNamespaceWhereInput!]
  or: [AnnotationNamespaceWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """annotations edge predicates"""
  hasAnnotations: Boolean
  hasAnnotationsWith: [AnnotationWhereInput!]
}

"""Ordering options for Annotation connections"""
input AnnotationOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Annotations."""
  field: AnnotationOrderField!
}

"""Properties by which Annotation connections can be ordered."""
enum AnnotationOrderField
  @join__type(graph: METADATA_API)
{
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
}

"""Input information to update an annotation."""
input AnnotationUpdateInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this annotation."""
  nodeID: ID!

  """The namespace ID for this annotation."""
  namespaceID: ID!

  """The data to save in this annotation."""
  data: JSON!
}

"""Return response from annotationUpdate"""
type AnnotationUpdateResponse
  @join__type(graph: METADATA_API)
{
  """The set annotation."""
  annotation: Annotation!
}

"""
AnnotationWhereInput is used for filtering Annotation objects.
Input was generated by ent.
"""
input AnnotationWhereInput
  @join__type(graph: METADATA_API)
{
  not: AnnotationWhereInput
  and: [AnnotationWhereInput!]
  or: [AnnotationWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """namespace edge predicates"""
  hasNamespace: Boolean
  hasNamespaceWith: [AnnotationNamespaceWhereInput!]

  """metadata edge predicates"""
  hasMetadata: Boolean
  hasMetadataWith: [MetadataWhereInput!]
}

"""Input information to create an annotation namespace."""
input CreateAnnotationNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the annotation namespace."""
  name: String!

  """The ID for the owner for this annotation namespace."""
  ownerID: ID!

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Input information to create a location."""
input CreateLocationInput
  @join__type(graph: LOCATION_API)
{
  """The name for the location."""
  name: String!

  """An optional description for the location."""
  description: String

  """The ID of the resource owner for the location."""
  ownerID: ID!
}

"""Input information to create a status namespace."""
input CreateStatusInput
  @join__type(graph: METADATA_API)
{
  source: String!

  """JSON formatted data of this annotation."""
  data: JSON!
  namespaceID: ID!
  metadataID: ID!
}

"""Input information to create a status namespace."""
input CreateStatusNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the status namespace."""
  name: String!

  """The ID for the tenant for this status namespace."""
  resourceProviderID: ID!

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Input information to create a tenant."""
input CreateTenantInput
  @join__type(graph: TENANT_API)
{
  """The name of a tenant."""
  name: String!

  """An optional description of the tenant."""
  description: String
  parentID: ID
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: TENANT_API)

scalar join__FieldSet

enum join__Graph {
  LOCATION_API @join__graph(name: "location-api", url: "http://localhost:7906/query")
  METADATA_API @join__graph(name: "metadata-api", url: "http://localhost:7905/query")
  NODE_RESOLVER @join__graph(name: "node-resolver", url: "http://localhost:7904/graphql")
  RESOURCE_PROVIDER_API @join__graph(name: "resource-provider-api", url: "http://localhost:7912/query")
  TENANT_API @join__graph(name: "tenant-api", url: "http://localhost:7902/graphql")
}

"""A valid JSON string."""
scalar JSON
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: TENANT_API)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Location implements Node & MetadataNode
  @join__implements(graph: LOCATION_API, interface: "Node")
  @join__implements(graph: LOCATION_API, interface: "MetadataNode")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "MetadataNode")
  @join__type(graph: LOCATION_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """ID for the location."""
  id: ID!
  createdAt: Time! @join__field(graph: LOCATION_API)
  updatedAt: Time! @join__field(graph: LOCATION_API)

  """The name for the location."""
  name: String! @join__field(graph: LOCATION_API)

  """An optional description for the location."""
  description: String @join__field(graph: LOCATION_API)
  owner: ResourceOwner! @join__field(graph: LOCATION_API)
  metadata: Metadata @join__field
}

"""A connection to a list of items."""
type LocationConnection
  @join__type(graph: LOCATION_API)
{
  """A list of edges."""
  edges: [LocationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from locationCreate"""
type LocationCreatePayload
  @join__type(graph: LOCATION_API)
{
  """The created annotation namespace."""
  location: Location!
}

"""Return response from locationDelete"""
type LocationDeletePayload
  @join__type(graph: LOCATION_API)
{
  """The ID of the deleted annotation namespace."""
  deletedID: ID!
}

"""An edge in a connection."""
type LocationEdge
  @join__type(graph: LOCATION_API)
{
  """The item at the end of the edge."""
  node: Location

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for Location connections"""
input LocationOrder
  @join__type(graph: LOCATION_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Locations."""
  field: LocationOrderField!
}

"""Properties by which Location connections can be ordered."""
enum LocationOrderField
  @join__type(graph: LOCATION_API)
{
  CREATED_AT @join__enumValue(graph: LOCATION_API)
  UPDATED_AT @join__enumValue(graph: LOCATION_API)
  NAME @join__enumValue(graph: LOCATION_API)
}

"""Return response from locationUpdate"""
type LocationUpdatePayload
  @join__type(graph: LOCATION_API)
{
  """The updated annotation namespace."""
  location: Location!
}

"""
LocationWhereInput is used for filtering Location objects.
Input was generated by ent.
"""
input LocationWhereInput
  @join__type(graph: LOCATION_API)
{
  not: LocationWhereInput
  and: [LocationWhereInput!]
  or: [LocationWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}

type Metadata implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: METADATA_API, key: "nodeID")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """ID for the metadata."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """ID of the node for this metadata"""
  nodeID: ID! @join__field(graph: METADATA_API)
  annotations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Annotations returned from the connection."""
    orderBy: AnnotationOrder

    """Filtering options for Annotations returned from the connection."""
    where: AnnotationWhereInput
  ): AnnotationConnection! @join__field(graph: METADATA_API)
  statuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StatusSlice returned from the connection."""
    orderBy: StatusOrder

    """Filtering options for StatusSlice returned from the connection."""
    where: StatusWhereInput
  ): StatusConnection! @join__field(graph: METADATA_API)
  node: MetadataNode! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type MetadataConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [MetadataEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MetadataEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: Metadata

  """A cursor for use in pagination."""
  cursor: Cursor!
}

interface MetadataNode
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API, key: "id", isInterfaceObject: true)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  id: ID!
  metadata: Metadata @join__field(graph: METADATA_API)
}

"""Ordering options for Metadata connections"""
input MetadataOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order MetadataSlice."""
  field: MetadataOrderField!
}

"""Properties by which Metadata connections can be ordered."""
enum MetadataOrderField
  @join__type(graph: METADATA_API)
{
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
}

"""
MetadataWhereInput is used for filtering Metadata objects.
Input was generated by ent.
"""
input MetadataWhereInput
  @join__type(graph: METADATA_API)
{
  not: MetadataWhereInput
  and: [MetadataWhereInput!]
  or: [MetadataWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """annotations edge predicates"""
  hasAnnotations: Boolean
  hasAnnotationsWith: [AnnotationWhereInput!]

  """statuses edge predicates"""
  hasStatuses: Boolean
  hasStatusesWith: [StatusWhereInput!]
}

type Mutation
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: TENANT_API)
{
  """Create a location."""
  locationCreate(input: CreateLocationInput!): LocationCreatePayload! @join__field(graph: LOCATION_API)

  """Delete a location."""
  locationDelete(
    """The ID of the annotation namespace to be deleted."""
    id: ID!
  ): LocationDeletePayload! @join__field(graph: LOCATION_API)

  """Update a location."""
  locationUpdate(id: ID!, input: UpdateLocationInput!): LocationUpdatePayload! @join__field(graph: LOCATION_API)

  """
  Set Annotation data for a node and annotation namespace to the given value.
  
  annotationUpdate is an Upsert operation and will create the annotation if it doesn't already exists.
  """
  annotationUpdate(input: AnnotationUpdateInput!): AnnotationUpdateResponse! @join__field(graph: METADATA_API)

  """Delete Annotation for a node and annotation namespace."""
  annotationDelete(input: AnnotationDeleteInput!): AnnotationDeleteResponse! @join__field(graph: METADATA_API)

  """Create an annotation namespace."""
  annotationNamespaceCreate(input: CreateAnnotationNamespaceInput!): AnnotationNamespaceCreatePayload! @join__field(graph: METADATA_API)

  """
  Delete an annotation namespace.
  
  Setting force allowed deleting an annotation namespace even if annotations are using it.
  WARNING: Annotation data will be lost permenantly!
  """
  annotationNamespaceDelete(
    """The ID of the annotation namespace to be deleted."""
    id: ID!

    """
    Delete the annotation namespace even if annotations are using it. WARNING!! The annotations will also be deleted!
    """
    force: Boolean! = false
  ): AnnotationNamespaceDeletePayload! @join__field(graph: METADATA_API)

  """Update an annotation namespace."""
  annotationNamespaceUpdate(id: ID!, input: UpdateAnnotationNamespaceInput!): AnnotationNamespaceUpdatePayload! @join__field(graph: METADATA_API)

  """
  Set Status data for a node and status namespace to the given value.
  
  statusUpdate is an Upsert operation and will create the status if it doesn't already exists.
  """
  statusUpdate(input: StatusUpdateInput!): StatusUpdateResponse! @join__field(graph: METADATA_API)

  """Delete Status for a node and status namespace."""
  statusDelete(input: StatusDeleteInput!): StatusDeleteResponse! @join__field(graph: METADATA_API)

  """Create an status namespace."""
  statusNamespaceCreate(input: CreateStatusNamespaceInput!): StatusNamespaceCreatePayload! @join__field(graph: METADATA_API)

  """
  Delete an status namespace.
  
  Setting force allowed deleting an status namespace even if statuss are using it.
  WARNING: Status data will be lost permenantly!
  """
  statusNamespaceDelete(
    """The ID of the status namespace to be deleted."""
    id: ID!

    """
    Delete the status namespace even if statuss are using it. WARNING!! The statuss will also be deleted!
    """
    force: Boolean! = false
  ): StatusNamespaceDeletePayload! @join__field(graph: METADATA_API)

  """Update an status namespace."""
  statusNamespaceUpdate(id: ID!, input: UpdateStatusNamespaceInput!): StatusNamespaceUpdatePayload! @join__field(graph: METADATA_API)

  """Create a tenant."""
  tenantCreate(input: CreateTenantInput!): TenantCreatePayload! @join__field(graph: TENANT_API)

  """Update a tenant."""
  tenantUpdate(id: ID!, input: UpdateTenantInput!): TenantUpdatePayload! @join__field(graph: TENANT_API)

  """Delete a tenant."""
  tenantDelete(id: ID!): TenantDeletePayload! @join__field(graph: TENANT_API)
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: TENANT_API)
{
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC @join__enumValue(graph: LOCATION_API) @join__enumValue(graph: METADATA_API) @join__enumValue(graph: TENANT_API)

  """Specifies a descending order for a given `orderBy` argument."""
  DESC @join__enumValue(graph: LOCATION_API) @join__enumValue(graph: METADATA_API) @join__enumValue(graph: TENANT_API)
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: TENANT_API)
{
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Query
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: NODE_RESOLVER)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """Lookup a location by id."""
  location(
    """The ID of the location."""
    id: ID!
  ): Location! @join__field(graph: LOCATION_API)

  """Get an annotation namespace by ID."""
  annotationNamespace(id: ID!): AnnotationNamespace! @join__field(graph: METADATA_API)
  resourceProvider(id: ID!): ResourceProvider! @join__field(graph: RESOURCE_PROVIDER_API)

  """Lookup a tenant by ID."""
  tenant(
    """The ID of the tenant."""
    id: ID!
  ): Tenant! @join__field(graph: TENANT_API)
}

interface ResourceOwner
  @join__type(graph: LOCATION_API, key: "id", isInterfaceObject: true)
  @join__type(graph: METADATA_API, key: "id", isInterfaceObject: true)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: TENANT_API)
{
  id: ID!
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection! @join__field(graph: LOCATION_API)
  annotationNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for AnnotationNamespaces returned from the connection.
    """
    orderBy: AnnotationNamespaceOrder

    """
    Filtering options for AnnotationNamespaces returned from the connection.
    """
    where: AnnotationNamespaceWhereInput
  ): AnnotationNamespaceConnection! @join__field(graph: METADATA_API)
  metadata: Metadata @join__field(graph: METADATA_API)
}

type ResourceProvider implements Node & MetadataNode
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "MetadataNode")
  @join__implements(graph: RESOURCE_PROVIDER_API, interface: "Node")
  @join__implements(graph: RESOURCE_PROVIDER_API, interface: "MetadataNode")
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_PROVIDER_API, key: "id")
{
  id: ID!
  createdAt: Time! @join__field(graph: RESOURCE_PROVIDER_API)
  updatedAt: Time! @join__field(graph: RESOURCE_PROVIDER_API)
  name: String! @join__field(graph: RESOURCE_PROVIDER_API)
  description: String @join__field(graph: RESOURCE_PROVIDER_API)
  metadata: Metadata @join__field
}

type Status implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """ID of the metadata of this status"""
  metadataID: ID! @join__field(graph: METADATA_API)
  statusNamespaceID: ID! @join__field(graph: METADATA_API)
  source: String! @join__field(graph: METADATA_API)

  """JSON formatted data of this annotation."""
  data: JSON! @join__field(graph: METADATA_API)
  namespace: StatusNamespace! @join__field(graph: METADATA_API)
  metadata: Metadata! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type StatusConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [StatusEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Input information to delete an status."""
input StatusDeleteInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this status."""
  nodeID: ID!

  """The namespace ID for this status."""
  namespaceID: ID!

  """The source for this status."""
  source: String!
}

"""Return response from statusDelete"""
type StatusDeleteResponse
  @join__type(graph: METADATA_API)
{
  """The ID of the unset status."""
  deletedID: ID!
}

"""An edge in a connection."""
type StatusEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: Status

  """A cursor for use in pagination."""
  cursor: Cursor!
}

type StatusNamespace implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID for the status namespace."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """The name of the status namespace."""
  name: String! @join__field(graph: METADATA_API)

  """Flag for if this namespace is private."""
  private: Boolean! @join__field(graph: METADATA_API)

  """The owner of the status namespace."""
  owner: StatusOwner! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type StatusNamespaceConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [StatusNamespaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from statusNamespaceCreate"""
type StatusNamespaceCreatePayload
  @join__type(graph: METADATA_API)
{
  """The created status namespace."""
  statusNamespace: StatusNamespace!
}

"""Return response from statusNamespaceDelete"""
type StatusNamespaceDeletePayload
  @join__type(graph: METADATA_API)
{
  """The ID of the deleted status namespace."""
  deletedID: ID!

  """The count of statuss deleted"""
  statusDeletedCount: Int!
}

"""An edge in a connection."""
type StatusNamespaceEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: StatusNamespace

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for StatusNamespace connections"""
input StatusNamespaceOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order StatusNamespaces."""
  field: StatusNamespaceOrderField!
}

"""Properties by which StatusNamespace connections can be ordered."""
enum StatusNamespaceOrderField
  @join__type(graph: METADATA_API)
{
  ID @join__enumValue(graph: METADATA_API)
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
  NAME @join__enumValue(graph: METADATA_API)
  RESOURCEPROVIDER @join__enumValue(graph: METADATA_API)
  PRIVATE @join__enumValue(graph: METADATA_API)
}

"""Return response from statusNamespaceUpdate"""
type StatusNamespaceUpdatePayload
  @join__type(graph: METADATA_API)
{
  """The updated status namespace."""
  statusNamespace: StatusNamespace!
}

"""
StatusNamespaceWhereInput is used for filtering StatusNamespace objects.
Input was generated by ent.
"""
input StatusNamespaceWhereInput
  @join__type(graph: METADATA_API)
{
  not: StatusNamespaceWhereInput
  and: [StatusNamespaceWhereInput!]
  or: [StatusNamespaceWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}

"""Ordering options for Status connections"""
input StatusOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order StatusSlice."""
  field: StatusOrderField!
}

"""Properties by which Status connections can be ordered."""
enum StatusOrderField
  @join__type(graph: METADATA_API)
{
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
}

interface StatusOwner
  @join__type(graph: METADATA_API, key: "id", isInterfaceObject: true)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  id: ID!
  statusNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StatusNamespaces returned from the connection."""
    orderBy: StatusNamespaceOrder

    """Filtering options for StatusNamespaces returned from the connection."""
    where: StatusNamespaceWhereInput
  ): StatusNamespaceConnection! @join__field(graph: METADATA_API)
}

"""Input information to update an status."""
input StatusUpdateInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this status."""
  nodeID: ID!

  """The namespace ID for this status."""
  namespaceID: ID!

  """The source for this status."""
  source: String!

  """The data to save in this status."""
  data: JSON!
}

"""Return response from statusUpdate"""
type StatusUpdateResponse
  @join__type(graph: METADATA_API)
{
  """The set status."""
  status: Status!
}

"""
StatusWhereInput is used for filtering Status objects.
Input was generated by ent.
"""
input StatusWhereInput
  @join__type(graph: METADATA_API)
{
  not: StatusWhereInput
  and: [StatusWhereInput!]
  or: [StatusWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """source field predicates"""
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String

  """namespace edge predicates"""
  hasNamespace: Boolean
  hasNamespaceWith: [StatusNamespaceWhereInput!]

  """metadata edge predicates"""
  hasMetadata: Boolean
  hasMetadataWith: [MetadataWhereInput!]
}

type Tenant implements Node & ResourceOwner
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "ResourceOwner")
  @join__implements(graph: TENANT_API, interface: "Node")
  @join__implements(graph: TENANT_API, interface: "ResourceOwner")
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: TENANT_API, key: "id")
{
  """ID for the tenant."""
  id: ID!
  createdAt: Time! @join__field(graph: TENANT_API)
  updatedAt: Time! @join__field(graph: TENANT_API)

  """The name of a tenant."""
  name: String! @join__field(graph: TENANT_API)

  """An optional description of the tenant."""
  description: String @join__field(graph: TENANT_API)
  parent: Tenant @join__field(graph: TENANT_API)
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tenants returned from the connection."""
    orderBy: TenantOrder

    """Filtering options for Tenants returned from the connection."""
    where: TenantWhereInput
  ): TenantConnection! @join__field(graph: TENANT_API)
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection! @join__field
  annotationNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for AnnotationNamespaces returned from the connection.
    """
    orderBy: AnnotationNamespaceOrder

    """
    Filtering options for AnnotationNamespaces returned from the connection.
    """
    where: AnnotationNamespaceWhereInput
  ): AnnotationNamespaceConnection! @join__field
  metadata: Metadata @join__field
}

"""A connection to a list of items."""
type TenantConnection
  @join__type(graph: TENANT_API)
{
  """A list of edges."""
  edges: [TenantEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from tenantCreate."""
type TenantCreatePayload
  @join__type(graph: TENANT_API)
{
  """The created tenant."""
  tenant: Tenant!
}

"""Return response from tenantDelete."""
type TenantDeletePayload
  @join__type(graph: TENANT_API)
{
  """The ID of the deleted tenant."""
  deletedID: ID!
}

"""An edge in a connection."""
type TenantEdge
  @join__type(graph: TENANT_API)
{
  """The item at the end of the edge."""
  node: Tenant

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for Tenant connections"""
input TenantOrder
  @join__type(graph: TENANT_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Tenants."""
  field: TenantOrderField!
}

"""Properties by which Tenant connections can be ordered."""
enum TenantOrderField
  @join__type(graph: TENANT_API)
{
  CREATED_AT @join__enumValue(graph: TENANT_API)
  UPDATED_AT @join__enumValue(graph: TENANT_API)
  NAME @join__enumValue(graph: TENANT_API)
}

"""Return response from tenantUpdate."""
type TenantUpdatePayload
  @join__type(graph: TENANT_API)
{
  """The updated tenant."""
  tenant: Tenant!
}

"""
TenantWhereInput is used for filtering Tenant objects.
Input was generated by ent.
"""
input TenantWhereInput
  @join__type(graph: TENANT_API)
{
  not: TenantWhereInput
  and: [TenantWhereInput!]
  or: [TenantWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [TenantWhereInput!]

  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [TenantWhereInput!]
}

"""The builtin Time type"""
scalar Time
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)

"""Input information to update an annotation namespace."""
input UpdateAnnotationNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the annotation namespace."""
  name: String

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Input information to update a location."""
input UpdateLocationInput
  @join__type(graph: LOCATION_API)
{
  """The name for the location."""
  name: String

  """An optional description for the location."""
  description: String
  clearDescription: Boolean
}

"""Input information to update a status namespace."""
input UpdateStatusInput
  @join__type(graph: METADATA_API)
{
  """JSON formatted data of this annotation."""
  data: JSON
  appendData: JSON
}

"""Input information to update a status namespace."""
input UpdateStatusNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the status namespace."""
  name: String

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Input information to update a tenant."""
input UpdateTenantInput
  @join__type(graph: TENANT_API)
{
  """The name of a tenant."""
  name: String

  """An optional description of the tenant."""
  description: String
  clearDescription: Boolean
}
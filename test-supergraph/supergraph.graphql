schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Annotation implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """ID for the annotation."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """ID of the metadata of this annotation"""
  metadataID: ID! @join__field(graph: METADATA_API)

  """JSON formatted data of this annotation."""
  data: JSON! @join__field(graph: METADATA_API)
  namespace: AnnotationNamespace! @join__field(graph: METADATA_API)
  metadata: Metadata! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type AnnotationConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [AnnotationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Input information to delete an annotation."""
input AnnotationDeleteInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this annotation."""
  nodeID: ID!

  """The namespace ID for this annotation."""
  namespaceID: ID!
}

"""Return response from annotationDelete"""
type AnnotationDeleteResponse
  @join__type(graph: METADATA_API)
{
  """The ID of the unset annotation."""
  deletedID: ID!
}

"""An edge in a connection."""
type AnnotationEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: Annotation

  """A cursor for use in pagination."""
  cursor: Cursor!
}

type AnnotationNamespace implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID for the annotation namespace."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """The name of the annotation namespace."""
  name: String! @join__field(graph: METADATA_API)

  """Flag for if this namespace is private."""
  private: Boolean! @join__field(graph: METADATA_API)
  annotations: [Annotation!] @join__field(graph: METADATA_API)

  """The owner of the annotation namespace."""
  owner: ResourceOwner! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type AnnotationNamespaceConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [AnnotationNamespaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from annotationNamespaceCreate"""
type AnnotationNamespaceCreatePayload
  @join__type(graph: METADATA_API)
{
  """The created annotation namespace."""
  annotationNamespace: AnnotationNamespace!
}

"""Return response from annotationNamespaceDelete"""
type AnnotationNamespaceDeletePayload
  @join__type(graph: METADATA_API)
{
  """The ID of the deleted annotation namespace."""
  deletedID: ID!

  """The count of annotations deleted"""
  annotationDeletedCount: Int!
}

"""An edge in a connection."""
type AnnotationNamespaceEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: AnnotationNamespace

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for AnnotationNamespace connections"""
input AnnotationNamespaceOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order AnnotationNamespaces."""
  field: AnnotationNamespaceOrderField!
}

"""Properties by which AnnotationNamespace connections can be ordered."""
enum AnnotationNamespaceOrderField
  @join__type(graph: METADATA_API)
{
  ID @join__enumValue(graph: METADATA_API)
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
  NAME @join__enumValue(graph: METADATA_API)
  OWNER @join__enumValue(graph: METADATA_API)
  PRIVATE @join__enumValue(graph: METADATA_API)
}

"""Return response from annotationNamespaceUpdate"""
type AnnotationNamespaceUpdatePayload
  @join__type(graph: METADATA_API)
{
  """The updated annotation namespace."""
  annotationNamespace: AnnotationNamespace!
}

"""
AnnotationNamespaceWhereInput is used for filtering AnnotationNamespace objects.
Input was generated by ent.
"""
input AnnotationNamespaceWhereInput
  @join__type(graph: METADATA_API)
{
  not: AnnotationNamespaceWhereInput
  and: [AnnotationNamespaceWhereInput!]
  or: [AnnotationNamespaceWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """annotations edge predicates"""
  hasAnnotations: Boolean
  hasAnnotationsWith: [AnnotationWhereInput!]
}

"""Ordering options for Annotation connections"""
input AnnotationOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Annotations."""
  field: AnnotationOrderField!
}

"""Properties by which Annotation connections can be ordered."""
enum AnnotationOrderField
  @join__type(graph: METADATA_API)
{
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
}

"""Input information to update an annotation."""
input AnnotationUpdateInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this annotation."""
  nodeID: ID!

  """The namespace ID for this annotation."""
  namespaceID: ID!

  """The data to save in this annotation."""
  data: JSON!
}

"""Return response from annotationUpdate"""
type AnnotationUpdateResponse
  @join__type(graph: METADATA_API)
{
  """The set annotation."""
  annotation: Annotation!
}

"""
AnnotationWhereInput is used for filtering Annotation objects.
Input was generated by ent.
"""
input AnnotationWhereInput
  @join__type(graph: METADATA_API)
{
  not: AnnotationWhereInput
  and: [AnnotationWhereInput!]
  or: [AnnotationWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """namespace edge predicates"""
  hasNamespace: Boolean
  hasNamespaceWith: [AnnotationNamespaceWhereInput!]

  """metadata edge predicates"""
  hasMetadata: Boolean
  hasMetadataWith: [MetadataWhereInput!]
}

"""Input information to create an annotation namespace."""
input CreateAnnotationNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the annotation namespace."""
  name: String!

  """The ID for the owner for this annotation namespace."""
  ownerID: ID!

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Create a new ip address type node."""
input CreateIPAddressInput
  @join__type(graph: IPAM_API)
{
  """The ip address."""
  ip: String!

  """The ID for the node this is assigned to."""
  nodeID: ID!

  """Owner ID of the node this is assigned to."""
  nodeOwnerID: ID!

  """Reserve the IP without it being assigned."""
  reserved: Boolean
  ipBlockID: ID!
}

"""Create a new ip block type node."""
input CreateIPBlockInput
  @join__type(graph: IPAM_API)
{
  """The prefix of the ip block."""
  prefix: String!

  """The ID for the location for this ip block."""
  locationID: ID!

  """The ID for the parent of this ip block."""
  parentBlockID: ID!

  """Allow carving this block into smaller subnets."""
  allowAutoSubnet: Boolean

  """Allow automatically assigning IPs directly from this block."""
  allowAutoAllocate: Boolean
  ipBlockTypeID: ID!
}

"""Create a new ip block type node."""
input CreateIPBlockTypeInput
  @join__type(graph: IPAM_API)
{
  """The name of the ip block type."""
  name: String!

  """The ID for the owner for this ip block type."""
  ownerID: ID!
}

"""Input information to create a load balancer."""
input CreateLoadBalancerInput
  @join__type(graph: LOAD_BALANCER_API)
{
  """The name of the load balancer."""
  name: String!

  """The ID for the owner for this load balancer."""
  ownerID: ID!

  """The ID for the location of this load balancer."""
  locationID: ID!
  portIDs: [ID!]
  providerID: ID!
}

"""
CreateLoadBalancerOriginInput is used for create LoadBalancerOrigin object.
Input was generated by ent.
"""
input CreateLoadBalancerOriginInput
  @join__type(graph: LOAD_BALANCER_API)
{
  name: String!
  weight: Int
  target: String!
  portNumber: Int!
  active: Boolean
  poolID: ID!
}

"""
CreateLoadBalancerPoolInput is used for create LoadBalancerPool object.
Input was generated by ent.
"""
input CreateLoadBalancerPoolInput
  @join__type(graph: LOAD_BALANCER_API)
{
  name: String!
  protocol: LoadBalancerPoolProtocol!
  ownerID: ID!
  portIDs: [ID!]
  originIDs: [ID!]
}

"""
CreateLoadBalancerPortInput is used for create LoadBalancerPort object.
Input was generated by ent.
"""
input CreateLoadBalancerPortInput
  @join__type(graph: LOAD_BALANCER_API)
{
  number: Int!
  name: String
  poolIDs: [ID!]
  loadBalancerID: ID!
}

"""Input information to create a load balancer provider."""
input CreateLoadBalancerProviderInput
  @join__type(graph: LOAD_BALANCER_API)
{
  """The name of the load balancer provider."""
  name: String!

  """The ID for the owner for this load balancer."""
  ownerID: ID!
}

"""Input information to create a location."""
input CreateLocationInput
  @join__type(graph: LOCATION_API)
{
  """The name for the location."""
  name: String!

  """An optional description for the location."""
  description: String

  """The ID of the resource owner for the location."""
  ownerID: ID!
}

"""Create a new ResourceProvider."""
input CreateResourceProviderInput
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The name of the resource provider."""
  name: String!

  """The description of the resource provider."""
  description: String

  """The ID for the owner for this resource provider."""
  ownerID: ID!
}

"""Input information to create a status namespace."""
input CreateStatusInput
  @join__type(graph: METADATA_API)
{
  source: String!

  """JSON formatted data of this annotation."""
  data: JSON!
  namespaceID: ID!
  metadataID: ID!
}

"""Input information to create a status namespace."""
input CreateStatusNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the status namespace."""
  name: String!

  """The ID of the resource provider for this status namespace."""
  resourceProviderID: ID!

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Input information to create a tenant."""
input CreateTenantInput
  @join__type(graph: TENANT_API)
{
  """The name of a tenant."""
  name: String!

  """An optional description of the tenant."""
  description: String
  parentID: ID
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)

type IPAddress implements Node
  @join__implements(graph: IPAM_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: IPAM_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID of the IP Address."""
  id: ID!
  createdAt: Time! @join__field(graph: IPAM_API)
  updatedAt: Time! @join__field(graph: IPAM_API)

  """The ip address."""
  ip: String! @join__field(graph: IPAM_API)

  """Reserve the IP without it being assigned."""
  reserved: Boolean! @join__field(graph: IPAM_API)
  ipBlock: IPBlock! @join__field(graph: IPAM_API)

  """IPAddresses that are associated with a given node"""
  node: IPAddressable! @join__field(graph: IPAM_API)
}

"""
IPAddressable provides an interface for describing IP addresses attached to a node
"""
interface IPAddressable
  @join__type(graph: IPAM_API, key: "id", isInterfaceObject: true)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!

  """IPAddressable describes IP addresses attached to a node"""
  IPAddresses: [IPAddress]! @join__field(graph: IPAM_API)
}

"""A connection to a list of items."""
type IPAddressConnection
  @join__type(graph: IPAM_API)
{
  """A list of edges."""
  edges: [IPAddressEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createIPAddress mutation"""
type IPAddressCreatePayload
  @join__type(graph: IPAM_API)
{
  """Created ip block type"""
  ip_address: IPAddress!
}

"""Return response for deleteIPAddress mutation"""
type IPAddressDeletePayload
  @join__type(graph: IPAM_API)
{
  """Deleted ip block type"""
  deletedID: ID!
}

"""An edge in a connection."""
type IPAddressEdge
  @join__type(graph: IPAM_API)
{
  """The item at the end of the edge."""
  node: IPAddress

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for IPAddress connections"""
input IPAddressOrder
  @join__type(graph: IPAM_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order IPAddresses."""
  field: IPAddressOrderField!
}

"""Properties by which IPAddress connections can be ordered."""
enum IPAddressOrderField
  @join__type(graph: IPAM_API)
{
  ID @join__enumValue(graph: IPAM_API)
  CREATED_AT @join__enumValue(graph: IPAM_API)
  UPDATED_AT @join__enumValue(graph: IPAM_API)
  IP @join__enumValue(graph: IPAM_API)
  BLOCK @join__enumValue(graph: IPAM_API)
  NODE @join__enumValue(graph: IPAM_API)
  OWNER @join__enumValue(graph: IPAM_API)
  RESERVED @join__enumValue(graph: IPAM_API)
}

"""Return response for updateIPAddress mutation"""
type IPAddressUpdatePayload
  @join__type(graph: IPAM_API)
{
  """Updated ip block type"""
  ip_address: IPAddress!
}

"""
IPAddressWhereInput is used for filtering IPAddress objects.
Input was generated by ent.
"""
input IPAddressWhereInput
  @join__type(graph: IPAM_API)
{
  not: IPAddressWhereInput
  and: [IPAddressWhereInput!]
  or: [IPAddressWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """IP field predicates"""
  ip: String
  ipNEQ: String
  ipIn: [String!]
  ipNotIn: [String!]
  ipGT: String
  ipGTE: String
  ipLT: String
  ipLTE: String
  ipContains: String
  ipHasPrefix: String
  ipHasSuffix: String
  ipEqualFold: String
  ipContainsFold: String

  """reserved field predicates"""
  reserved: Boolean
  reservedNEQ: Boolean

  """ip_block edge predicates"""
  hasIPBlock: Boolean
  hasIPBlockWith: [IPBlockWhereInput!]
}

type IPBlock implements Node
  @join__implements(graph: IPAM_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: IPAM_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID of the IP Block."""
  id: ID!
  createdAt: Time! @join__field(graph: IPAM_API)
  updatedAt: Time! @join__field(graph: IPAM_API)

  """The prefix of the ip block."""
  prefix: String! @join__field(graph: IPAM_API)

  """Allow carving this block into smaller subnets."""
  allowAutoSubnet: Boolean! @join__field(graph: IPAM_API)

  """Allow automatically assigning IPs directly from this block."""
  allowAutoAllocate: Boolean! @join__field(graph: IPAM_API)
  ipBlockType: IPBlockType! @join__field(graph: IPAM_API)
  ipAddress(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IPAddresses returned from the connection."""
    orderBy: IPAddressOrder

    """Filtering options for IPAddresses returned from the connection."""
    where: IPAddressWhereInput
  ): IPAddressConnection! @join__field(graph: IPAM_API)
}

"""A connection to a list of items."""
type IPBlockConnection
  @join__type(graph: IPAM_API)
{
  """A list of edges."""
  edges: [IPBlockEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createIPBlock mutation"""
type IPBlockCreatePayload
  @join__type(graph: IPAM_API)
{
  """Created ip block type"""
  ip_block: IPBlock!
}

"""Return response for deleteIPBlock mutation"""
type IPBlockDeletePayload
  @join__type(graph: IPAM_API)
{
  """Deleted ip block type"""
  deletedID: ID!
}

"""An edge in a connection."""
type IPBlockEdge
  @join__type(graph: IPAM_API)
{
  """The item at the end of the edge."""
  node: IPBlock

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for IPBlock connections"""
input IPBlockOrder
  @join__type(graph: IPAM_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order IPBlocks."""
  field: IPBlockOrderField!
}

"""Properties by which IPBlock connections can be ordered."""
enum IPBlockOrderField
  @join__type(graph: IPAM_API)
{
  ID @join__enumValue(graph: IPAM_API)
  CREATED_AT @join__enumValue(graph: IPAM_API)
  UPDATED_AT @join__enumValue(graph: IPAM_API)
  PREFIX @join__enumValue(graph: IPAM_API)
  BLOCK_TYPE @join__enumValue(graph: IPAM_API)
  LOCATION @join__enumValue(graph: IPAM_API)
  PARENT_BLOCK @join__enumValue(graph: IPAM_API)
  AUTOSUBNET @join__enumValue(graph: IPAM_API)
  AUTOALLOCATE @join__enumValue(graph: IPAM_API)
}

type IPBlockType implements Node
  @join__implements(graph: IPAM_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: IPAM_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID of the IP Block Type."""
  id: ID!
  createdAt: Time! @join__field(graph: IPAM_API)
  updatedAt: Time! @join__field(graph: IPAM_API)

  """The name of the ip block type."""
  name: String! @join__field(graph: IPAM_API)
  ipBlock(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IPBlocks returned from the connection."""
    orderBy: IPBlockOrder

    """Filtering options for IPBlocks returned from the connection."""
    where: IPBlockWhereInput
  ): IPBlockConnection! @join__field(graph: IPAM_API)

  """The owner of the ip block type."""
  owner: ResourceOwner! @join__field(graph: IPAM_API)
}

"""A connection to a list of items."""
type IPBlockTypeConnection
  @join__type(graph: IPAM_API)
{
  """A list of edges."""
  edges: [IPBlockTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createIPBlockType mutation"""
type IPBlockTypeCreatePayload
  @join__type(graph: IPAM_API)
{
  """Created ip block type"""
  ip_block_type: IPBlockType!
}

"""Return response for deleteIPBlockType mutation"""
type IPBlockTypeDeletePayload
  @join__type(graph: IPAM_API)
{
  """Deleted ip block type"""
  deletedID: ID!
}

"""An edge in a connection."""
type IPBlockTypeEdge
  @join__type(graph: IPAM_API)
{
  """The item at the end of the edge."""
  node: IPBlockType

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for IPBlockType connections"""
input IPBlockTypeOrder
  @join__type(graph: IPAM_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order IPBlockTypes."""
  field: IPBlockTypeOrderField!
}

"""Properties by which IPBlockType connections can be ordered."""
enum IPBlockTypeOrderField
  @join__type(graph: IPAM_API)
{
  ID @join__enumValue(graph: IPAM_API)
  CREATED_AT @join__enumValue(graph: IPAM_API)
  UPDATED_AT @join__enumValue(graph: IPAM_API)
  NAME @join__enumValue(graph: IPAM_API)
  OWNER @join__enumValue(graph: IPAM_API)
}

"""Return response for updateIPBlockType mutation"""
type IPBlockTypeUpdatePayload
  @join__type(graph: IPAM_API)
{
  """Updated ip block type"""
  ip_block_type: IPBlockType!
}

"""
IPBlockTypeWhereInput is used for filtering IPBlockType objects.
Input was generated by ent.
"""
input IPBlockTypeWhereInput
  @join__type(graph: IPAM_API)
{
  not: IPBlockTypeWhereInput
  and: [IPBlockTypeWhereInput!]
  or: [IPBlockTypeWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """ip_block edge predicates"""
  hasIPBlock: Boolean
  hasIPBlockWith: [IPBlockWhereInput!]
}

"""Return response for updateIPBlock mutation"""
type IPBlockUpdatePayload
  @join__type(graph: IPAM_API)
{
  """Updated ip block type"""
  ip_block: IPBlock!
}

"""
IPBlockWhereInput is used for filtering IPBlock objects.
Input was generated by ent.
"""
input IPBlockWhereInput
  @join__type(graph: IPAM_API)
{
  not: IPBlockWhereInput
  and: [IPBlockWhereInput!]
  or: [IPBlockWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """prefix field predicates"""
  prefix: String
  prefixNEQ: String
  prefixIn: [String!]
  prefixNotIn: [String!]
  prefixGT: String
  prefixGTE: String
  prefixLT: String
  prefixLTE: String
  prefixContains: String
  prefixHasPrefix: String
  prefixHasSuffix: String
  prefixEqualFold: String
  prefixContainsFold: String

  """allow_auto_subnet field predicates"""
  allowAutoSubnet: Boolean
  allowAutoSubnetNEQ: Boolean

  """allow_auto_allocate field predicates"""
  allowAutoAllocate: Boolean
  allowAutoAllocateNEQ: Boolean

  """ip_block_type edge predicates"""
  hasIPBlockType: Boolean
  hasIPBlockTypeWith: [IPBlockTypeWhereInput!]

  """ip_address edge predicates"""
  hasIPAddress: Boolean
  hasIPAddressWith: [IPAddressWhereInput!]
}

scalar join__FieldSet

enum join__Graph {
  IPAM_API @join__graph(name: "ipam-api", url: "http://ipam-api.ipam-api.svc.cluster.local/query")
  LOAD_BALANCER_API @join__graph(name: "load-balancer-api", url: "http://load-balancer-api.load-balancer-api.svc.cluster.local/query")
  LOCATION_API @join__graph(name: "location-api", url: "http://location-api.location-api.svc.cluster.local/query")
  METADATA_API @join__graph(name: "metadata-api", url: "http://metadata-api.metadata-api.svc.cluster.local/query")
  NODE_RESOLVER @join__graph(name: "node-resolver", url: "http://node-resolver.node-resolver.svc.cluster.local/query")
  RESOURCE_OWNER_DIRECTORY @join__graph(name: "resource-owner-directory", url: "https://resource-owner-directory.core-a.ny5.metalkube.net/api")
  RESOURCE_PROVIDER_API @join__graph(name: "resource-provider-api", url: "http://resource-provider-api.resource-provider-api.svc.cluster.local/query")
  TENANT_API @join__graph(name: "tenant-api", url: "http://tenant-api.tenant-api.svc.cluster.local/query")
}

"""A valid JSON string."""
scalar JSON
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LoadBalancer implements Node & IPAddressable & MetadataNode
  @join__implements(graph: LOAD_BALANCER_API, interface: "Node")
  @join__implements(graph: LOAD_BALANCER_API, interface: "IPAddressable")
  @join__implements(graph: LOAD_BALANCER_API, interface: "MetadataNode")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "MetadataNode")
  @join__implements(graph: NODE_RESOLVER, interface: "IPAddressable")
  @join__type(graph: LOAD_BALANCER_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID for the load balancer."""
  id: ID!
  createdAt: Time! @join__field(graph: LOAD_BALANCER_API)
  updatedAt: Time! @join__field(graph: LOAD_BALANCER_API)

  """The name of the load balancer."""
  name: String! @join__field(graph: LOAD_BALANCER_API)
  ports(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancerPorts returned from the connection."""
    orderBy: LoadBalancerPortOrder

    """Filtering options for LoadBalancerPorts returned from the connection."""
    where: LoadBalancerPortWhereInput
  ): LoadBalancerPortConnection! @join__field(graph: LOAD_BALANCER_API)

  """The load balancer provider for the load balancer."""
  loadBalancerProvider: LoadBalancerProvider! @join__field(graph: LOAD_BALANCER_API)

  """The location of the load balancer."""
  location: Location! @join__field(graph: LOAD_BALANCER_API)

  """The owner of the load balancer."""
  owner: ResourceOwner! @join__field(graph: LOAD_BALANCER_API)

  """IPAddressable describes IP addresses attached to a node"""
  IPAddresses: [IPAddress]! @join__field

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field
}

"""A connection to a list of items."""
type LoadBalancerConnection
  @join__type(graph: LOAD_BALANCER_API)
{
  """A list of edges."""
  edges: [LoadBalancerEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from loadBalancerCreate"""
type LoadBalancerCreatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The created load balancer."""
  loadBalancer: LoadBalancer!
}

"""Return response from loadBalancerDelete"""
type LoadBalancerDeletePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ID of the deleted load balancer."""
  deletedID: ID!
}

"""An edge in a connection."""
type LoadBalancerEdge
  @join__type(graph: LOAD_BALANCER_API)
{
  """The item at the end of the edge."""
  node: LoadBalancer

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for LoadBalancer connections"""
input LoadBalancerOrder
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order LoadBalancers."""
  field: LoadBalancerOrderField!
}

"""Properties by which LoadBalancer connections can be ordered."""
enum LoadBalancerOrderField
  @join__type(graph: LOAD_BALANCER_API)
{
  ID @join__enumValue(graph: LOAD_BALANCER_API)
  CREATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  UPDATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  NAME @join__enumValue(graph: LOAD_BALANCER_API)
  OWNER @join__enumValue(graph: LOAD_BALANCER_API)
}

type LoadBalancerOrigin implements Node
  @join__implements(graph: LOAD_BALANCER_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: LOAD_BALANCER_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!
  createdAt: Time! @join__field(graph: LOAD_BALANCER_API)
  updatedAt: Time! @join__field(graph: LOAD_BALANCER_API)
  name: String! @join__field(graph: LOAD_BALANCER_API)
  weight: Int! @join__field(graph: LOAD_BALANCER_API)
  target: String! @join__field(graph: LOAD_BALANCER_API)
  portNumber: Int! @join__field(graph: LOAD_BALANCER_API)
  active: Boolean! @join__field(graph: LOAD_BALANCER_API)
  poolID: ID! @join__field(graph: LOAD_BALANCER_API)
  pool: LoadBalancerPool! @join__field(graph: LOAD_BALANCER_API)
}

"""A connection to a list of items."""
type LoadBalancerOriginConnection
  @join__type(graph: LOAD_BALANCER_API)
{
  """A list of edges."""
  edges: [LoadBalancerOriginEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from loadBalancerOriginCreate"""
type LoadBalancerOriginCreatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The created pool origin."""
  loadBalancerOrigin: LoadBalancerOrigin!
}

"""Return response from loadBalancerOriginDelete"""
type LoadBalancerOriginDeletePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The deleted pool origin."""
  deletedID: ID!
}

"""An edge in a connection."""
type LoadBalancerOriginEdge
  @join__type(graph: LOAD_BALANCER_API)
{
  """The item at the end of the edge."""
  node: LoadBalancerOrigin

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for LoadBalancerOrigin connections"""
input LoadBalancerOriginOrder
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order LoadBalancerOrigins."""
  field: LoadBalancerOriginOrderField!
}

"""Properties by which LoadBalancerOrigin connections can be ordered."""
enum LoadBalancerOriginOrderField
  @join__type(graph: LOAD_BALANCER_API)
{
  CREATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  UPDATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  name @join__enumValue(graph: LOAD_BALANCER_API)
  weight @join__enumValue(graph: LOAD_BALANCER_API)
  target @join__enumValue(graph: LOAD_BALANCER_API)
  number @join__enumValue(graph: LOAD_BALANCER_API)
  active @join__enumValue(graph: LOAD_BALANCER_API)
}

"""Return response from loadBalancerOriginUpdate"""
type LoadBalancerOriginUpdatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The updated pool origin."""
  loadBalancerOrigin: LoadBalancerOrigin!
}

"""
LoadBalancerOriginWhereInput is used for filtering Origin objects.
Input was generated by ent.
"""
input LoadBalancerOriginWhereInput
  @join__type(graph: LOAD_BALANCER_API)
{
  not: LoadBalancerOriginWhereInput
  and: [LoadBalancerOriginWhereInput!]
  or: [LoadBalancerOriginWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """weight field predicates"""
  weight: Int
  weightNEQ: Int
  weightIn: [Int!]
  weightNotIn: [Int!]
  weightGT: Int
  weightGTE: Int
  weightLT: Int
  weightLTE: Int

  """target field predicates"""
  target: String
  targetNEQ: String
  targetIn: [String!]
  targetNotIn: [String!]
  targetGT: String
  targetGTE: String
  targetLT: String
  targetLTE: String
  targetContains: String
  targetHasPrefix: String
  targetHasSuffix: String
  targetEqualFold: String
  targetContainsFold: String

  """port_number field predicates"""
  portNumber: Int
  portNumberNEQ: Int
  portNumberIn: [Int!]
  portNumberNotIn: [Int!]
  portNumberGT: Int
  portNumberGTE: Int
  portNumberLT: Int
  portNumberLTE: Int

  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean

  """pool edge predicates"""
  hasPool: Boolean
  hasPoolWith: [LoadBalancerPoolWhereInput!]
}

type LoadBalancerPool implements Node
  @join__implements(graph: LOAD_BALANCER_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: LOAD_BALANCER_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!
  createdAt: Time! @join__field(graph: LOAD_BALANCER_API)
  updatedAt: Time! @join__field(graph: LOAD_BALANCER_API)
  name: String! @join__field(graph: LOAD_BALANCER_API)
  protocol: LoadBalancerPoolProtocol! @join__field(graph: LOAD_BALANCER_API)
  ownerID: ID! @join__field(graph: LOAD_BALANCER_API)
  ports: [LoadBalancerPort!] @join__field(graph: LOAD_BALANCER_API)
  origins(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancerOrigins returned from the connection."""
    orderBy: LoadBalancerOriginOrder

    """
    Filtering options for LoadBalancerOrigins returned from the connection.
    """
    where: LoadBalancerOriginWhereInput
  ): LoadBalancerOriginConnection! @join__field(graph: LOAD_BALANCER_API)

  """The owner of the load balancer pool."""
  owner: ResourceOwner! @join__field(graph: LOAD_BALANCER_API)
}

"""A connection to a list of items."""
type LoadBalancerPoolConnection
  @join__type(graph: LOAD_BALANCER_API)
{
  """A list of edges."""
  edges: [LoadBalancerPoolEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from LoadBalancerPoolCreate"""
type LoadBalancerPoolCreatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The created pool."""
  loadBalancerPool: LoadBalancerPool!
}

"""Return response from LoadBalancerPoolDelete"""
type LoadBalancerPoolDeletePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ID of the deleted pool."""
  deletedID: ID
}

"""An edge in a connection."""
type LoadBalancerPoolEdge
  @join__type(graph: LOAD_BALANCER_API)
{
  """The item at the end of the edge."""
  node: LoadBalancerPool

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for LoadBalancerPool connections"""
input LoadBalancerPoolOrder
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order LoadBalancerPools."""
  field: LoadBalancerPoolOrderField!
}

"""Properties by which LoadBalancerPool connections can be ordered."""
enum LoadBalancerPoolOrderField
  @join__type(graph: LOAD_BALANCER_API)
{
  CREATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  UPDATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  name @join__enumValue(graph: LOAD_BALANCER_API)
  protocol @join__enumValue(graph: LOAD_BALANCER_API)
}

"""LoadBalancerPoolProtocol is enum for the field protocol"""
enum LoadBalancerPoolProtocol
  @join__type(graph: LOAD_BALANCER_API)
{
  tcp @join__enumValue(graph: LOAD_BALANCER_API)
  udp @join__enumValue(graph: LOAD_BALANCER_API)
}

"""Return response from LoadBalancerPoolUpdate"""
type LoadBalancerPoolUpdatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The updated pool."""
  loadBalancerPool: LoadBalancerPool!
}

"""
LoadBalancerPoolWhereInput is used for filtering Pool objects.
Input was generated by ent.
"""
input LoadBalancerPoolWhereInput
  @join__type(graph: LOAD_BALANCER_API)
{
  not: LoadBalancerPoolWhereInput
  and: [LoadBalancerPoolWhereInput!]
  or: [LoadBalancerPoolWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """protocol field predicates"""
  protocol: LoadBalancerPoolProtocol
  protocolNEQ: LoadBalancerPoolProtocol
  protocolIn: [LoadBalancerPoolProtocol!]
  protocolNotIn: [LoadBalancerPoolProtocol!]

  """ports edge predicates"""
  hasPorts: Boolean
  hasPortsWith: [LoadBalancerPortWhereInput!]

  """origins edge predicates"""
  hasOrigins: Boolean
  hasOriginsWith: [LoadBalancerOriginWhereInput!]
}

type LoadBalancerPort implements Node
  @join__implements(graph: LOAD_BALANCER_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: LOAD_BALANCER_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!
  createdAt: Time! @join__field(graph: LOAD_BALANCER_API)
  updatedAt: Time! @join__field(graph: LOAD_BALANCER_API)
  number: Int! @join__field(graph: LOAD_BALANCER_API)
  name: String @join__field(graph: LOAD_BALANCER_API)
  loadBalancerID: ID! @join__field(graph: LOAD_BALANCER_API)
  pools: [LoadBalancerPool!] @join__field(graph: LOAD_BALANCER_API)
  loadBalancer: LoadBalancer! @join__field(graph: LOAD_BALANCER_API)
}

"""A connection to a list of items."""
type LoadBalancerPortConnection
  @join__type(graph: LOAD_BALANCER_API)
{
  """A list of edges."""
  edges: [LoadBalancerPortEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from loadBalancerPortCreate"""
type LoadBalancerPortCreatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The created load balancer port."""
  loadBalancerPort: LoadBalancerPort!
}

"""Return response from loadBalancerPortDelete"""
type LoadBalancerPortDeletePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ID of the deleted load balancer port."""
  deletedID: ID!
}

"""An edge in a connection."""
type LoadBalancerPortEdge
  @join__type(graph: LOAD_BALANCER_API)
{
  """The item at the end of the edge."""
  node: LoadBalancerPort

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for LoadBalancerPort connections"""
input LoadBalancerPortOrder
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order LoadBalancerPorts."""
  field: LoadBalancerPortOrderField!
}

"""Properties by which LoadBalancerPort connections can be ordered."""
enum LoadBalancerPortOrderField
  @join__type(graph: LOAD_BALANCER_API)
{
  CREATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  UPDATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  number @join__enumValue(graph: LOAD_BALANCER_API)
  name @join__enumValue(graph: LOAD_BALANCER_API)
}

"""Return response from loadBalancerPortUpdate"""
type LoadBalancerPortUpdatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The updated load balancer port."""
  loadBalancerPort: LoadBalancerPort!
}

"""
LoadBalancerPortWhereInput is used for filtering Port objects.
Input was generated by ent.
"""
input LoadBalancerPortWhereInput
  @join__type(graph: LOAD_BALANCER_API)
{
  not: LoadBalancerPortWhereInput
  and: [LoadBalancerPortWhereInput!]
  or: [LoadBalancerPortWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """number field predicates"""
  number: Int
  numberNEQ: Int
  numberIn: [Int!]
  numberNotIn: [Int!]
  numberGT: Int
  numberGTE: Int
  numberLT: Int
  numberLTE: Int

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String

  """pools edge predicates"""
  hasPools: Boolean
  hasPoolsWith: [LoadBalancerPoolWhereInput!]

  """load_balancer edge predicates"""
  hasLoadBalancer: Boolean
  hasLoadBalancerWith: [LoadBalancerWhereInput!]
}

type LoadBalancerProvider implements Node
  @join__implements(graph: LOAD_BALANCER_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: LOAD_BALANCER_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID for the load balancer provider."""
  id: ID!
  createdAt: Time! @join__field(graph: LOAD_BALANCER_API)
  updatedAt: Time! @join__field(graph: LOAD_BALANCER_API)

  """The name of the load balancer provider."""
  name: String! @join__field(graph: LOAD_BALANCER_API)
  loadBalancers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancers returned from the connection."""
    orderBy: LoadBalancerOrder

    """Filtering options for LoadBalancers returned from the connection."""
    where: LoadBalancerWhereInput
  ): LoadBalancerConnection! @join__field(graph: LOAD_BALANCER_API)

  """The owner of the load balancer provider."""
  owner: ResourceOwner! @join__field(graph: LOAD_BALANCER_API)
}

"""A connection to a list of items."""
type LoadBalancerProviderConnection
  @join__type(graph: LOAD_BALANCER_API)
{
  """A list of edges."""
  edges: [LoadBalancerProviderEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from loadBalancerProviderCreate"""
type LoadBalancerProviderCreatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The created load balancer provider."""
  loadBalancerProvider: LoadBalancerProvider!
}

"""Return response from loadBalancerProviderDelete"""
type LoadBalancerProviderDeletePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ID of the deleted load balancer provider."""
  deletedID: ID!
}

"""An edge in a connection."""
type LoadBalancerProviderEdge
  @join__type(graph: LOAD_BALANCER_API)
{
  """The item at the end of the edge."""
  node: LoadBalancerProvider

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for LoadBalancerProvider connections"""
input LoadBalancerProviderOrder
  @join__type(graph: LOAD_BALANCER_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order LoadBalancerProviders."""
  field: LoadBalancerProviderOrderField!
}

"""Properties by which LoadBalancerProvider connections can be ordered."""
enum LoadBalancerProviderOrderField
  @join__type(graph: LOAD_BALANCER_API)
{
  ID @join__enumValue(graph: LOAD_BALANCER_API)
  CREATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  UPDATED_AT @join__enumValue(graph: LOAD_BALANCER_API)
  NAME @join__enumValue(graph: LOAD_BALANCER_API)
  OWNER @join__enumValue(graph: LOAD_BALANCER_API)
}

"""Return response from loadBalancerProviderUpdate"""
type LoadBalancerProviderUpdatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The updated load balancer provider."""
  loadBalancerProvider: LoadBalancerProvider!
}

"""
LoadBalancerProviderWhereInput is used for filtering Provider objects.
Input was generated by ent.
"""
input LoadBalancerProviderWhereInput
  @join__type(graph: LOAD_BALANCER_API)
{
  not: LoadBalancerProviderWhereInput
  and: [LoadBalancerProviderWhereInput!]
  or: [LoadBalancerProviderWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """load_balancers edge predicates"""
  hasLoadBalancers: Boolean
  hasLoadBalancersWith: [LoadBalancerWhereInput!]
}

"""Return response from loadBalancerUpdate"""
type LoadBalancerUpdatePayload
  @join__type(graph: LOAD_BALANCER_API)
{
  """The updated load balancer."""
  loadBalancer: LoadBalancer!
}

"""
LoadBalancerWhereInput is used for filtering LoadBalancer objects.
Input was generated by ent.
"""
input LoadBalancerWhereInput
  @join__type(graph: LOAD_BALANCER_API)
{
  not: LoadBalancerWhereInput
  and: [LoadBalancerWhereInput!]
  or: [LoadBalancerWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """ports edge predicates"""
  hasPorts: Boolean
  hasPortsWith: [LoadBalancerPortWhereInput!]

  """provider edge predicates"""
  hasProvider: Boolean
  hasProviderWith: [LoadBalancerProviderWhereInput!]
}

type Location implements Node & MetadataNode
  @join__implements(graph: LOCATION_API, interface: "Node")
  @join__implements(graph: LOCATION_API, interface: "MetadataNode")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "MetadataNode")
  @join__type(graph: LOAD_BALANCER_API, key: "id")
  @join__type(graph: LOCATION_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """ID for the location."""
  id: ID!
  loadBalancers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancers returned from the connection."""
    orderBy: LoadBalancerOrder

    """Filtering options for LoadBalancers returned from the connection."""
    where: LoadBalancerWhereInput
  ): LoadBalancerConnection! @join__field(graph: LOAD_BALANCER_API)
  createdAt: Time! @join__field(graph: LOCATION_API)
  updatedAt: Time! @join__field(graph: LOCATION_API)

  """The name for the location."""
  name: String! @join__field(graph: LOCATION_API)

  """An optional description for the location."""
  description: String @join__field(graph: LOCATION_API)
  owner: ResourceOwner! @join__field(graph: LOCATION_API)

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field
}

"""A connection to a list of items."""
type LocationConnection
  @join__type(graph: LOCATION_API)
{
  """A list of edges."""
  edges: [LocationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from locationCreate"""
type LocationCreatePayload
  @join__type(graph: LOCATION_API)
{
  """The created annotation namespace."""
  location: Location!
}

"""Return response from locationDelete"""
type LocationDeletePayload
  @join__type(graph: LOCATION_API)
{
  """The ID of the deleted annotation namespace."""
  deletedID: ID!
}

"""An edge in a connection."""
type LocationEdge
  @join__type(graph: LOCATION_API)
{
  """The item at the end of the edge."""
  node: Location

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for Location connections"""
input LocationOrder
  @join__type(graph: LOCATION_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Locations."""
  field: LocationOrderField!
}

"""Properties by which Location connections can be ordered."""
enum LocationOrderField
  @join__type(graph: LOCATION_API)
{
  CREATED_AT @join__enumValue(graph: LOCATION_API)
  UPDATED_AT @join__enumValue(graph: LOCATION_API)
  NAME @join__enumValue(graph: LOCATION_API)
}

"""Return response from locationUpdate"""
type LocationUpdatePayload
  @join__type(graph: LOCATION_API)
{
  """The updated annotation namespace."""
  location: Location!
}

"""
LocationWhereInput is used for filtering Location objects.
Input was generated by ent.
"""
input LocationWhereInput
  @join__type(graph: LOCATION_API)
{
  not: LocationWhereInput
  and: [LocationWhereInput!]
  or: [LocationWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}

type Metadata implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: METADATA_API, key: "nodeID")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """ID for the metadata."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """ID of the node for this metadata"""
  nodeID: ID! @join__field(graph: METADATA_API)
  annotations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Annotations returned from the connection."""
    orderBy: AnnotationOrder

    """Filtering options for Annotations returned from the connection."""
    where: AnnotationWhereInput
  ): AnnotationConnection! @join__field(graph: METADATA_API)
  statuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StatusSlice returned from the connection."""
    orderBy: StatusOrder

    """Filtering options for StatusSlice returned from the connection."""
    where: StatusWhereInput
  ): StatusConnection! @join__field(graph: METADATA_API)

  """Node that this metadata is assigned to."""
  node: MetadataNode! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type MetadataConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [MetadataEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MetadataEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: Metadata

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""
MetadataNode provides an interface for any Node in the graph that can store metadata.
"""
interface MetadataNode
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API, key: "id", isInterfaceObject: true)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: TENANT_API)
{
  id: ID!

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field(graph: METADATA_API)
}

"""Ordering options for Metadata connections"""
input MetadataOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order MetadataSlice."""
  field: MetadataOrderField!
}

"""Properties by which Metadata connections can be ordered."""
enum MetadataOrderField
  @join__type(graph: METADATA_API)
{
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
}

"""
MetadataWhereInput is used for filtering Metadata objects.
Input was generated by ent.
"""
input MetadataWhereInput
  @join__type(graph: METADATA_API)
{
  not: MetadataWhereInput
  and: [MetadataWhereInput!]
  or: [MetadataWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """annotations edge predicates"""
  hasAnnotations: Boolean
  hasAnnotationsWith: [AnnotationWhereInput!]

  """statuses edge predicates"""
  hasStatuses: Boolean
  hasStatusesWith: [StatusWhereInput!]
}

type Mutation
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """Create a new ip block type"""
  createIPAddress(
    """Name of the ip block type"""
    input: CreateIPAddressInput!
  ): IPAddressCreatePayload! @join__field(graph: IPAM_API)

  """Update an existing ip block type"""
  updateIPAddress(
    """ID of the ip block type"""
    id: ID!

    """Name of the ip block type"""
    input: UpdateIPAddressInput!
  ): IPAddressUpdatePayload! @join__field(graph: IPAM_API)

  """Delete an existing ip block type"""
  deleteIPAddress(
    """ID of the ip block type"""
    id: ID!
  ): IPAddressDeletePayload! @join__field(graph: IPAM_API)

  """Create a new ip block type"""
  createIPBlock(
    """Name of the ip block type"""
    input: CreateIPBlockInput!
  ): IPBlockCreatePayload! @join__field(graph: IPAM_API)

  """Update an existing ip block type"""
  updateIPBlock(
    """ID of the ip block type"""
    id: ID!

    """Name of the ip block type"""
    input: UpdateIPBlockInput!
  ): IPBlockUpdatePayload! @join__field(graph: IPAM_API)

  """Delete an existing ip block type"""
  deleteIPBlock(
    """ID of the ip block type"""
    id: ID!
  ): IPBlockDeletePayload! @join__field(graph: IPAM_API)

  """Create a new ip block type"""
  createIPBlockType(
    """Name of the ip block type"""
    input: CreateIPBlockTypeInput!
  ): IPBlockTypeCreatePayload! @join__field(graph: IPAM_API)

  """Update an existing ip block type"""
  updateIPBlockType(
    """ID of the ip block type"""
    id: ID!

    """Name of the ip block type"""
    input: UpdateIPBlockTypeInput!
  ): IPBlockTypeUpdatePayload! @join__field(graph: IPAM_API)

  """Delete an existing ip block type"""
  deleteIPBlockType(
    """ID of the ip block type"""
    id: ID!
  ): IPBlockTypeDeletePayload! @join__field(graph: IPAM_API)

  """Create a loadbalancer pool origin"""
  loadBalancerOriginCreate(input: CreateLoadBalancerOriginInput!): LoadBalancerOriginCreatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Update a loadbalancer pool origin"""
  loadBalancerOriginUpdate(id: ID!, input: UpdateLoadBalancerOriginInput!): LoadBalancerOriginUpdatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Delete a loadbalancer pool origin"""
  loadBalancerOriginDelete(id: ID!): LoadBalancerOriginDeletePayload! @join__field(graph: LOAD_BALANCER_API)

  """Create a load balancer."""
  loadBalancerCreate(input: CreateLoadBalancerInput!): LoadBalancerCreatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Update a load balancer."""
  loadBalancerUpdate(id: ID!, input: UpdateLoadBalancerInput!): LoadBalancerUpdatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Delete a load balancer."""
  loadBalancerDelete(id: ID!): LoadBalancerDeletePayload! @join__field(graph: LOAD_BALANCER_API)

  """Create a pool."""
  loadBalancerPoolCreate(input: CreateLoadBalancerPoolInput!): LoadBalancerPoolCreatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Update a pool."""
  loadBalancerPoolUpdate(id: ID!, input: UpdateLoadBalancerPoolInput!): LoadBalancerPoolUpdatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Delete a pool."""
  loadBalancerPoolDelete(id: ID!): LoadBalancerPoolDeletePayload! @join__field(graph: LOAD_BALANCER_API)

  """Create a load balancer port."""
  loadBalancerPortCreate(input: CreateLoadBalancerPortInput!): LoadBalancerPortCreatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Update a load balancer port."""
  loadBalancerPortUpdate(id: ID!, input: UpdateLoadBalancerPortInput!): LoadBalancerPortUpdatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Delete a load balancer port"""
  loadBalancerPortDelete(id: ID!): LoadBalancerPortDeletePayload! @join__field(graph: LOAD_BALANCER_API)

  """Create a load balancer provider."""
  loadBalancerProviderCreate(input: CreateLoadBalancerProviderInput!): LoadBalancerProviderCreatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Update a load balancer provider."""
  loadBalancerProviderUpdate(id: ID!, input: UpdateLoadBalancerProviderInput!): LoadBalancerProviderUpdatePayload! @join__field(graph: LOAD_BALANCER_API)

  """Delete a load balancer provider."""
  loadBalancerProviderDelete(id: ID!): LoadBalancerProviderDeletePayload! @join__field(graph: LOAD_BALANCER_API)

  """Create a location."""
  locationCreate(input: CreateLocationInput!): LocationCreatePayload! @join__field(graph: LOCATION_API)

  """Delete a location."""
  locationDelete(
    """The ID of the annotation namespace to be deleted."""
    id: ID!
  ): LocationDeletePayload! @join__field(graph: LOCATION_API)

  """Update a location."""
  locationUpdate(id: ID!, input: UpdateLocationInput!): LocationUpdatePayload! @join__field(graph: LOCATION_API)

  """
  Set Annotation data for a node and annotation namespace to the given value.
  
  annotationUpdate is an Upsert operation and will create the annotation if it doesn't already exists.
  """
  annotationUpdate(input: AnnotationUpdateInput!): AnnotationUpdateResponse! @join__field(graph: METADATA_API)

  """Delete Annotation for a node and annotation namespace."""
  annotationDelete(input: AnnotationDeleteInput!): AnnotationDeleteResponse! @join__field(graph: METADATA_API)

  """Create an annotation namespace."""
  annotationNamespaceCreate(input: CreateAnnotationNamespaceInput!): AnnotationNamespaceCreatePayload! @join__field(graph: METADATA_API)

  """
  Delete an annotation namespace.
  
  Setting force allowed deleting an annotation namespace even if annotations are using it.
  WARNING: Annotation data will be lost permenantly!
  """
  annotationNamespaceDelete(
    """The ID of the annotation namespace to be deleted."""
    id: ID!

    """
    Delete the annotation namespace even if annotations are using it. WARNING!! The annotations will also be deleted!
    """
    force: Boolean! = false
  ): AnnotationNamespaceDeletePayload! @join__field(graph: METADATA_API)

  """Update an annotation namespace."""
  annotationNamespaceUpdate(id: ID!, input: UpdateAnnotationNamespaceInput!): AnnotationNamespaceUpdatePayload! @join__field(graph: METADATA_API)

  """
  Set Status data for a node and status namespace to the given value.
  
  statusUpdate is an Upsert operation and will create the status if it doesn't already exists.
  """
  statusUpdate(input: StatusUpdateInput!): StatusUpdateResponse! @join__field(graph: METADATA_API)

  """Delete Status for a node and status namespace."""
  statusDelete(input: StatusDeleteInput!): StatusDeleteResponse! @join__field(graph: METADATA_API)

  """Create an status namespace."""
  statusNamespaceCreate(input: CreateStatusNamespaceInput!): StatusNamespaceCreatePayload! @join__field(graph: METADATA_API)

  """
  Delete an status namespace.
  
  Setting force allowed deleting an status namespace even if statuss are using it.
  WARNING: Status data will be lost permenantly!
  """
  statusNamespaceDelete(
    """The ID of the status namespace to be deleted."""
    id: ID!

    """
    Delete the status namespace even if statuss are using it. WARNING!! The statuss will also be deleted!
    """
    force: Boolean! = false
  ): StatusNamespaceDeletePayload! @join__field(graph: METADATA_API)

  """Update an status namespace."""
  statusNamespaceUpdate(id: ID!, input: UpdateStatusNamespaceInput!): StatusNamespaceUpdatePayload! @join__field(graph: METADATA_API)

  """Create a resource provider."""
  resourceProviderCreate(input: CreateResourceProviderInput!): ResourceProviderCreatePayload! @join__field(graph: RESOURCE_PROVIDER_API)

  """Update a resource provider."""
  resourceProviderUpdate(id: ID!, input: UpdateResourceProviderInput!): ResourceProviderUpdatePayload! @join__field(graph: RESOURCE_PROVIDER_API)

  """Delete a resource provider."""
  resourceProviderDelete(id: ID!): ResourceProviderDeletePayload! @join__field(graph: RESOURCE_PROVIDER_API)

  """Create a tenant."""
  tenantCreate(input: CreateTenantInput!): TenantCreatePayload! @join__field(graph: TENANT_API)

  """Update a tenant."""
  tenantUpdate(id: ID!, input: UpdateTenantInput!): TenantUpdatePayload! @join__field(graph: TENANT_API)

  """Delete a tenant."""
  tenantDelete(id: ID!): TenantDeletePayload! @join__field(graph: TENANT_API)
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC @join__enumValue(graph: IPAM_API) @join__enumValue(graph: LOAD_BALANCER_API) @join__enumValue(graph: LOCATION_API) @join__enumValue(graph: METADATA_API) @join__enumValue(graph: RESOURCE_PROVIDER_API) @join__enumValue(graph: TENANT_API)

  """Specifies a descending order for a given `orderBy` argument."""
  DESC @join__enumValue(graph: IPAM_API) @join__enumValue(graph: LOAD_BALANCER_API) @join__enumValue(graph: LOCATION_API) @join__enumValue(graph: METADATA_API) @join__enumValue(graph: RESOURCE_PROVIDER_API) @join__enumValue(graph: TENANT_API)
}

"""An organization"""
type Organization
  @join__type(graph: RESOURCE_OWNER_DIRECTORY, key: "id")
{
  id: OrgId!
  name: String!

  """Projects within the parent organization"""
  projects: [Project]

  """Users that have access to the organization"""
  users: [User]
}

scalar OrgId
  @join__type(graph: RESOURCE_OWNER_DIRECTORY)

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A project"""
type Project implements Node & ResourceOwner
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "ResourceOwner")
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_OWNER_DIRECTORY, key: "id")
{
  id: ID!
  name: String! @join__field(graph: RESOURCE_OWNER_DIRECTORY)

  """Organization that contains the project"""
  organization: Organization! @join__field(graph: RESOURCE_OWNER_DIRECTORY)

  """Users that have access to the organization"""
  users: [User] @join__field(graph: RESOURCE_OWNER_DIRECTORY)
  ip_block_type(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IPBlockTypes returned from the connection."""
    orderBy: IPBlockTypeOrder

    """Filtering options for IPBlockTypes returned from the connection."""
    where: IPBlockTypeWhereInput
  ): IPBlockTypeConnection! @join__field
  loadBalancers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancers returned from the connection."""
    orderBy: LoadBalancerOrder

    """Filtering options for LoadBalancers returned from the connection."""
    where: LoadBalancerWhereInput
  ): LoadBalancerConnection! @join__field
  loadBalancerPools(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancerPools returned from the connection."""
    orderBy: LoadBalancerPoolOrder

    """Filtering options for LoadBalancerPools returned from the connection."""
    where: LoadBalancerPoolWhereInput
  ): LoadBalancerPoolConnection! @join__field
  loadBalancersProviders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for LoadBalancerProviders returned from the connection.
    """
    orderBy: LoadBalancerOrder

    """
    Filtering options for LoadBalancerProviders returned from the connection.
    """
    where: LoadBalancerProviderWhereInput
  ): LoadBalancerProviderConnection! @join__field
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection! @join__field
  annotationNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for AnnotationNamespaces returned from the connection.
    """
    orderBy: AnnotationNamespaceOrder

    """
    Filtering options for AnnotationNamespaces returned from the connection.
    """
    where: AnnotationNamespaceWhereInput
  ): AnnotationNamespaceConnection! @join__field

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field
  resourceProvider(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ResourceProvider returned from the connection."""
    orderBy: ResourceProviderOrder

    """Filtering options for ResourceProvider returned from the connection."""
    where: ResourceProviderWhereInput
  ): ResourceProviderConnection! @join__field
}

scalar ProjectId
  @join__type(graph: RESOURCE_OWNER_DIRECTORY)

type Query
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: NODE_RESOLVER)
  @join__type(graph: RESOURCE_OWNER_DIRECTORY)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)
{
  """Look up ip block type by ID"""
  ip_address(
    """ID of the ip block type"""
    id: ID!
  ): IPAddress! @join__field(graph: IPAM_API)

  """Look up ip block type by ID"""
  ip_block(
    """ID of the ip block type"""
    id: ID!
  ): IPBlock! @join__field(graph: IPAM_API)

  """Look up ip block type by ID"""
  ip_block_type(
    """ID of the ip block type"""
    id: ID!
  ): IPBlockType! @join__field(graph: IPAM_API)
  loadBalancerPools(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancerPools returned from the connection."""
    orderBy: LoadBalancerPoolOrder

    """Filtering options for LoadBalancerPools returned from the connection."""
    where: LoadBalancerPoolWhereInput
  ): LoadBalancerPoolConnection! @join__field(graph: LOAD_BALANCER_API)

  """Lookup a load balancer by ID."""
  loadBalancer(
    """The load balancer ID."""
    id: ID!
  ): LoadBalancer! @join__field(graph: LOAD_BALANCER_API)

  """Lookup a pool by ID."""
  loadBalancerPool(
    """The pool ID."""
    id: ID!
  ): LoadBalancerPool! @join__field(graph: LOAD_BALANCER_API)

  """Lookup a load balancer provider by ID."""
  loadBalancerProvider(
    """The load balancer provider ID."""
    id: ID!
  ): LoadBalancerProvider! @join__field(graph: LOAD_BALANCER_API)

  """Lookup a location by id."""
  location(
    """The ID of the location."""
    id: ID!
  ): Location! @join__field(graph: LOCATION_API)

  """Get an annotation namespace by ID."""
  annotationNamespace(id: ID!): AnnotationNamespace! @join__field(graph: METADATA_API)

  """Lookup a node by id."""
  node(
    """The ID of the node."""
    id: ID!
  ): Node! @join__field(graph: NODE_RESOLVER)

  """Get a specific organizations"""
  organization(id: OrgId!): Organization @join__field(graph: RESOURCE_OWNER_DIRECTORY)

  """Get a specific project"""
  project(id: ProjectId!): Project @join__field(graph: RESOURCE_OWNER_DIRECTORY)

  """Get a user's roles within the context of an organization or a project"""
  roles(userId: UserId!, orgId: OrgId, projectId: ProjectId): [String] @join__field(graph: RESOURCE_OWNER_DIRECTORY)

  """Lookup a resource provider by ID."""
  resourceProvider(
    """The resource provider ID."""
    id: ID!
  ): ResourceProvider! @join__field(graph: RESOURCE_PROVIDER_API)

  """Lookup a tenant by ID."""
  tenant(
    """The ID of the tenant."""
    id: ID!
  ): Tenant! @join__field(graph: TENANT_API)
}

interface ResourceOwner
  @join__type(graph: IPAM_API, key: "id", isInterfaceObject: true)
  @join__type(graph: LOAD_BALANCER_API, key: "id", isInterfaceObject: true)
  @join__type(graph: LOCATION_API, key: "id", isInterfaceObject: true)
  @join__type(graph: METADATA_API, key: "id", isInterfaceObject: true)
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_OWNER_DIRECTORY)
  @join__type(graph: RESOURCE_PROVIDER_API, key: "id", isInterfaceObject: true)
  @join__type(graph: TENANT_API)
{
  id: ID!
  ip_block_type(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IPBlockTypes returned from the connection."""
    orderBy: IPBlockTypeOrder

    """Filtering options for IPBlockTypes returned from the connection."""
    where: IPBlockTypeWhereInput
  ): IPBlockTypeConnection! @join__field(graph: IPAM_API)
  loadBalancers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancers returned from the connection."""
    orderBy: LoadBalancerOrder

    """Filtering options for LoadBalancers returned from the connection."""
    where: LoadBalancerWhereInput
  ): LoadBalancerConnection! @join__field(graph: LOAD_BALANCER_API)
  loadBalancerPools(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancerPools returned from the connection."""
    orderBy: LoadBalancerPoolOrder

    """Filtering options for LoadBalancerPools returned from the connection."""
    where: LoadBalancerPoolWhereInput
  ): LoadBalancerPoolConnection! @join__field(graph: LOAD_BALANCER_API)
  loadBalancersProviders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for LoadBalancerProviders returned from the connection.
    """
    orderBy: LoadBalancerOrder

    """
    Filtering options for LoadBalancerProviders returned from the connection.
    """
    where: LoadBalancerProviderWhereInput
  ): LoadBalancerProviderConnection! @join__field(graph: LOAD_BALANCER_API)
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection! @join__field(graph: LOCATION_API)
  annotationNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for AnnotationNamespaces returned from the connection.
    """
    orderBy: AnnotationNamespaceOrder

    """
    Filtering options for AnnotationNamespaces returned from the connection.
    """
    where: AnnotationNamespaceWhereInput
  ): AnnotationNamespaceConnection! @join__field(graph: METADATA_API)

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field(graph: METADATA_API)
  resourceProvider(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ResourceProvider returned from the connection."""
    orderBy: ResourceProviderOrder

    """Filtering options for ResourceProvider returned from the connection."""
    where: ResourceProviderWhereInput
  ): ResourceProviderConnection! @join__field(graph: RESOURCE_PROVIDER_API)
}

type ResourceProvider implements StatusOwner & Node
  @join__implements(graph: NODE_RESOLVER, interface: "StatusOwner")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: RESOURCE_PROVIDER_API, interface: "Node")
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: RESOURCE_PROVIDER_API, key: "id")
{
  """The ID of the resource provider."""
  id: ID!
  createdAt: Time! @join__field(graph: RESOURCE_PROVIDER_API)
  updatedAt: Time! @join__field(graph: RESOURCE_PROVIDER_API)

  """The name of the resource provider."""
  name: String! @join__field(graph: RESOURCE_PROVIDER_API)

  """The description of the resource provider."""
  description: String @join__field(graph: RESOURCE_PROVIDER_API)

  """The owner of the resourceProvider."""
  owner: ResourceOwner! @join__field(graph: RESOURCE_PROVIDER_API)
  statusNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StatusNamespaces returned from the connection."""
    orderBy: StatusNamespaceOrder

    """Filtering options for StatusNamespaces returned from the connection."""
    where: StatusNamespaceWhereInput
  ): StatusNamespaceConnection! @join__field

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field
}

"""A connection to a list of items."""
type ResourceProviderConnection
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """A list of edges."""
  edges: [ResourceProviderEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from resourceProviderCreate"""
type ResourceProviderCreatePayload
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The created resource provider."""
  resourceProvider: ResourceProvider!
}

"""Return response from resourceProviderDelete"""
type ResourceProviderDeletePayload
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The ID of the deleted resource provider."""
  deletedID: ID!
}

"""An edge in a connection."""
type ResourceProviderEdge
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The item at the end of the edge."""
  node: ResourceProvider

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for ResourceProvider connections"""
input ResourceProviderOrder
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order ResourceProviders."""
  field: ResourceProviderOrderField!
}

"""Properties by which ResourceProvider connections can be ordered."""
enum ResourceProviderOrderField
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  ID @join__enumValue(graph: RESOURCE_PROVIDER_API)
  CREATED_AT @join__enumValue(graph: RESOURCE_PROVIDER_API)
  UPDATED_AT @join__enumValue(graph: RESOURCE_PROVIDER_API)
  NAME @join__enumValue(graph: RESOURCE_PROVIDER_API)
  DESCRIPTION @join__enumValue(graph: RESOURCE_PROVIDER_API)
}

"""Return response from resourceProviderUpdate"""
type ResourceProviderUpdatePayload
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The updated resource provider."""
  resourceProvider: ResourceProvider!
}

"""
ResourceProviderWhereInput is used for filtering ResourceProvider objects.
Input was generated by ent.
"""
input ResourceProviderWhereInput
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  not: ResourceProviderWhereInput
  and: [ResourceProviderWhereInput!]
  or: [ResourceProviderWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
}

type Status implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """ID of the metadata of this status"""
  metadataID: ID! @join__field(graph: METADATA_API)
  statusNamespaceID: ID! @join__field(graph: METADATA_API)
  source: String! @join__field(graph: METADATA_API)

  """JSON formatted data of this annotation."""
  data: JSON! @join__field(graph: METADATA_API)
  namespace: StatusNamespace! @join__field(graph: METADATA_API)
  metadata: Metadata! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type StatusConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [StatusEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Input information to delete an status."""
input StatusDeleteInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this status."""
  nodeID: ID!

  """The namespace ID for this status."""
  namespaceID: ID!

  """The source for this status."""
  source: String!
}

"""Return response from statusDelete"""
type StatusDeleteResponse
  @join__type(graph: METADATA_API)
{
  """The ID of the unset status."""
  deletedID: ID!
}

"""An edge in a connection."""
type StatusEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: Status

  """A cursor for use in pagination."""
  cursor: Cursor!
}

type StatusNamespace implements Node
  @join__implements(graph: METADATA_API, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__type(graph: METADATA_API, key: "id")
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  """The ID for the status namespace."""
  id: ID!
  createdAt: Time! @join__field(graph: METADATA_API)
  updatedAt: Time! @join__field(graph: METADATA_API)

  """The name of the status namespace."""
  name: String! @join__field(graph: METADATA_API)

  """Flag for if this namespace is private."""
  private: Boolean! @join__field(graph: METADATA_API)

  """The owner of the status namespace."""
  owner: StatusOwner! @join__field(graph: METADATA_API)
}

"""A connection to a list of items."""
type StatusNamespaceConnection
  @join__type(graph: METADATA_API)
{
  """A list of edges."""
  edges: [StatusNamespaceEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from statusNamespaceCreate"""
type StatusNamespaceCreatePayload
  @join__type(graph: METADATA_API)
{
  """The created status namespace."""
  statusNamespace: StatusNamespace!
}

"""Return response from statusNamespaceDelete"""
type StatusNamespaceDeletePayload
  @join__type(graph: METADATA_API)
{
  """The ID of the deleted status namespace."""
  deletedID: ID!

  """The count of statuss deleted"""
  statusDeletedCount: Int!
}

"""An edge in a connection."""
type StatusNamespaceEdge
  @join__type(graph: METADATA_API)
{
  """The item at the end of the edge."""
  node: StatusNamespace

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for StatusNamespace connections"""
input StatusNamespaceOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order StatusNamespaces."""
  field: StatusNamespaceOrderField!
}

"""Properties by which StatusNamespace connections can be ordered."""
enum StatusNamespaceOrderField
  @join__type(graph: METADATA_API)
{
  ID @join__enumValue(graph: METADATA_API)
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
  NAME @join__enumValue(graph: METADATA_API)
  RESOURCEPROVIDER @join__enumValue(graph: METADATA_API)
  PRIVATE @join__enumValue(graph: METADATA_API)
}

"""Return response from statusNamespaceUpdate"""
type StatusNamespaceUpdatePayload
  @join__type(graph: METADATA_API)
{
  """The updated status namespace."""
  statusNamespace: StatusNamespace!
}

"""
StatusNamespaceWhereInput is used for filtering StatusNamespace objects.
Input was generated by ent.
"""
input StatusNamespaceWhereInput
  @join__type(graph: METADATA_API)
{
  not: StatusNamespaceWhereInput
  and: [StatusNamespaceWhereInput!]
  or: [StatusNamespaceWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}

"""Ordering options for Status connections"""
input StatusOrder
  @join__type(graph: METADATA_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order StatusSlice."""
  field: StatusOrderField!
}

"""Properties by which Status connections can be ordered."""
enum StatusOrderField
  @join__type(graph: METADATA_API)
{
  CREATED_AT @join__enumValue(graph: METADATA_API)
  UPDATED_AT @join__enumValue(graph: METADATA_API)
}

interface StatusOwner
  @join__type(graph: METADATA_API, key: "id", isInterfaceObject: true)
  @join__type(graph: NODE_RESOLVER, key: "id")
{
  id: ID!
  statusNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StatusNamespaces returned from the connection."""
    orderBy: StatusNamespaceOrder

    """Filtering options for StatusNamespaces returned from the connection."""
    where: StatusNamespaceWhereInput
  ): StatusNamespaceConnection! @join__field(graph: METADATA_API)

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field(graph: METADATA_API)
}

"""Input information to update an status."""
input StatusUpdateInput
  @join__type(graph: METADATA_API)
{
  """The node ID for this status."""
  nodeID: ID!

  """The namespace ID for this status."""
  namespaceID: ID!

  """The source for this status."""
  source: String!

  """The data to save in this status."""
  data: JSON!
}

"""Return response from statusUpdate"""
type StatusUpdateResponse
  @join__type(graph: METADATA_API)
{
  """The set status."""
  status: Status!
}

"""
StatusWhereInput is used for filtering Status objects.
Input was generated by ent.
"""
input StatusWhereInput
  @join__type(graph: METADATA_API)
{
  not: StatusWhereInput
  and: [StatusWhereInput!]
  or: [StatusWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """source field predicates"""
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String

  """namespace edge predicates"""
  hasNamespace: Boolean
  hasNamespaceWith: [StatusNamespaceWhereInput!]

  """metadata edge predicates"""
  hasMetadata: Boolean
  hasMetadataWith: [MetadataWhereInput!]
}

type Tenant implements Node & ResourceOwner & MetadataNode
  @join__implements(graph: NODE_RESOLVER, interface: "Node")
  @join__implements(graph: NODE_RESOLVER, interface: "ResourceOwner")
  @join__implements(graph: NODE_RESOLVER, interface: "MetadataNode")
  @join__implements(graph: TENANT_API, interface: "Node")
  @join__implements(graph: TENANT_API, interface: "ResourceOwner")
  @join__implements(graph: TENANT_API, interface: "MetadataNode")
  @join__type(graph: NODE_RESOLVER, key: "id")
  @join__type(graph: TENANT_API, key: "id")
{
  """ID for the tenant."""
  id: ID!
  createdAt: Time! @join__field(graph: TENANT_API)
  updatedAt: Time! @join__field(graph: TENANT_API)

  """The name of a tenant."""
  name: String! @join__field(graph: TENANT_API)

  """An optional description of the tenant."""
  description: String @join__field(graph: TENANT_API)
  parent: Tenant @join__field(graph: TENANT_API)
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tenants returned from the connection."""
    orderBy: TenantOrder

    """Filtering options for Tenants returned from the connection."""
    where: TenantWhereInput
  ): TenantConnection! @join__field(graph: TENANT_API)
  ip_block_type(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IPBlockTypes returned from the connection."""
    orderBy: IPBlockTypeOrder

    """Filtering options for IPBlockTypes returned from the connection."""
    where: IPBlockTypeWhereInput
  ): IPBlockTypeConnection! @join__field
  loadBalancers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancers returned from the connection."""
    orderBy: LoadBalancerOrder

    """Filtering options for LoadBalancers returned from the connection."""
    where: LoadBalancerWhereInput
  ): LoadBalancerConnection! @join__field
  loadBalancerPools(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for LoadBalancerPools returned from the connection."""
    orderBy: LoadBalancerPoolOrder

    """Filtering options for LoadBalancerPools returned from the connection."""
    where: LoadBalancerPoolWhereInput
  ): LoadBalancerPoolConnection! @join__field
  loadBalancersProviders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for LoadBalancerProviders returned from the connection.
    """
    orderBy: LoadBalancerOrder

    """
    Filtering options for LoadBalancerProviders returned from the connection.
    """
    where: LoadBalancerProviderWhereInput
  ): LoadBalancerProviderConnection! @join__field
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection! @join__field
  annotationNamespaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for AnnotationNamespaces returned from the connection.
    """
    orderBy: AnnotationNamespaceOrder

    """
    Filtering options for AnnotationNamespaces returned from the connection.
    """
    where: AnnotationNamespaceWhereInput
  ): AnnotationNamespaceConnection! @join__field

  """Metadata about this node, including annotations and statuses."""
  metadata: Metadata @join__field
  resourceProvider(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ResourceProvider returned from the connection."""
    orderBy: ResourceProviderOrder

    """Filtering options for ResourceProvider returned from the connection."""
    where: ResourceProviderWhereInput
  ): ResourceProviderConnection! @join__field
}

"""A connection to a list of items."""
type TenantConnection
  @join__type(graph: TENANT_API)
{
  """A list of edges."""
  edges: [TenantEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response from tenantCreate."""
type TenantCreatePayload
  @join__type(graph: TENANT_API)
{
  """The created tenant."""
  tenant: Tenant!
}

"""Return response from tenantDelete."""
type TenantDeletePayload
  @join__type(graph: TENANT_API)
{
  """The ID of the deleted tenant."""
  deletedID: ID!
}

"""An edge in a connection."""
type TenantEdge
  @join__type(graph: TENANT_API)
{
  """The item at the end of the edge."""
  node: Tenant

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for Tenant connections"""
input TenantOrder
  @join__type(graph: TENANT_API)
{
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Tenants."""
  field: TenantOrderField!
}

"""Properties by which Tenant connections can be ordered."""
enum TenantOrderField
  @join__type(graph: TENANT_API)
{
  CREATED_AT @join__enumValue(graph: TENANT_API)
  UPDATED_AT @join__enumValue(graph: TENANT_API)
  NAME @join__enumValue(graph: TENANT_API)
}

"""Return response from tenantUpdate."""
type TenantUpdatePayload
  @join__type(graph: TENANT_API)
{
  """The updated tenant."""
  tenant: Tenant!
}

"""
TenantWhereInput is used for filtering Tenant objects.
Input was generated by ent.
"""
input TenantWhereInput
  @join__type(graph: TENANT_API)
{
  not: TenantWhereInput
  and: [TenantWhereInput!]
  or: [TenantWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [TenantWhereInput!]

  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [TenantWhereInput!]
}

"""The builtin Time type"""
scalar Time
  @join__type(graph: IPAM_API)
  @join__type(graph: LOAD_BALANCER_API)
  @join__type(graph: LOCATION_API)
  @join__type(graph: METADATA_API)
  @join__type(graph: RESOURCE_PROVIDER_API)
  @join__type(graph: TENANT_API)

"""Input information to update an annotation namespace."""
input UpdateAnnotationNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the annotation namespace."""
  name: String

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Update an existing ip address type node."""
input UpdateIPAddressInput
  @join__type(graph: IPAM_API)
{
  """The ip address."""
  ip: String

  """Reserve the IP without it being assigned."""
  reserved: Boolean
}

"""Update an existing ip block type node."""
input UpdateIPBlockInput
  @join__type(graph: IPAM_API)
{
  """The prefix of the ip block."""
  prefix: String

  """Allow carving this block into smaller subnets."""
  allowAutoSubnet: Boolean

  """Allow automatically assigning IPs directly from this block."""
  allowAutoAllocate: Boolean
}

"""Update an existing ip block type node."""
input UpdateIPBlockTypeInput
  @join__type(graph: IPAM_API)
{
  """The name of the ip block type."""
  name: String
}

"""Input information to update a load balancer."""
input UpdateLoadBalancerInput
  @join__type(graph: LOAD_BALANCER_API)
{
  """The name of the load balancer."""
  name: String
  addPortIDs: [ID!]
  removePortIDs: [ID!]
  clearPorts: Boolean
}

"""
UpdateLoadBalancerOriginInput is used for update LoadBalancerOrigin object.
Input was generated by ent.
"""
input UpdateLoadBalancerOriginInput
  @join__type(graph: LOAD_BALANCER_API)
{
  name: String
  weight: Int
  target: String
  portNumber: Int
  active: Boolean
}

"""
UpdateLoadBalancerPoolInput is used for update LoadBalancerPool object.
Input was generated by ent.
"""
input UpdateLoadBalancerPoolInput
  @join__type(graph: LOAD_BALANCER_API)
{
  name: String
  protocol: LoadBalancerPoolProtocol
  addPortIDs: [ID!]
  removePortIDs: [ID!]
  clearPorts: Boolean
  addOriginIDs: [ID!]
  removeOriginIDs: [ID!]
  clearOrigins: Boolean
}

"""
UpdateLoadBalancerPortInput is used for update LoadBalancerPort object.
Input was generated by ent.
"""
input UpdateLoadBalancerPortInput
  @join__type(graph: LOAD_BALANCER_API)
{
  number: Int
  name: String
  clearName: Boolean
  addPoolIDs: [ID!]
  removePoolIDs: [ID!]
  clearPools: Boolean
}

"""Input information to update a load balancer provider."""
input UpdateLoadBalancerProviderInput
  @join__type(graph: LOAD_BALANCER_API)
{
  """The name of the load balancer provider."""
  name: String
}

"""Input information to update a location."""
input UpdateLocationInput
  @join__type(graph: LOCATION_API)
{
  """The name for the location."""
  name: String

  """An optional description for the location."""
  description: String
  clearDescription: Boolean
}

"""Update an existing ResourceProvider."""
input UpdateResourceProviderInput
  @join__type(graph: RESOURCE_PROVIDER_API)
{
  """The name of the resource provider."""
  name: String

  """The description of the resource provider."""
  description: String
  clearDescription: Boolean
}

"""Input information to update a status namespace."""
input UpdateStatusInput
  @join__type(graph: METADATA_API)
{
  """JSON formatted data of this annotation."""
  data: JSON
  appendData: JSON
}

"""Input information to update a status namespace."""
input UpdateStatusNamespaceInput
  @join__type(graph: METADATA_API)
{
  """The name of the status namespace."""
  name: String

  """Flag for if this namespace is private."""
  private: Boolean
}

"""Input information to update a tenant."""
input UpdateTenantInput
  @join__type(graph: TENANT_API)
{
  """The name of a tenant."""
  name: String

  """An optional description of the tenant."""
  description: String
  clearDescription: Boolean
}

"""A user"""
type User
  @join__type(graph: RESOURCE_OWNER_DIRECTORY)
{
  id: UserId!
  roles: [String]
}

scalar UserId
  @join__type(graph: RESOURCE_OWNER_DIRECTORY)